"use client"
import type React from "react"
import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Loader2 } from "lucide-react"
import ReactMarkdown from "react-markdown"

type Message = {
  id: string
  content: string
  isUser: boolean
}

export default function Chat() {
  const [messages, setMessages] = useState<Message[]>([])
  const [input, setInput] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  // Scroll to bottom whenever messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }, [messages])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!input.trim() || isLoading) return

    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      content: input,
      isUser: true,
    }

    setMessages((prev) => [...prev, userMessage])
    setInput("")
    setIsLoading(true)

    try {
      // Send request to API
      const response = await fetch("http://localhost:4001/api/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ prompt: input }),
      })

      if (!response.ok) {
        throw new Error("Failed to fetch response")
      }

      const data = await response.json()

      // Add AI response
      const aiMessage: Message = {
        id: Date.now().toString(),
        content: data.response || "Sorry, I couldn't process that request.",
        isUser: false,
      }

      setMessages((prev) => [...prev, aiMessage])
    } catch (error) {
      console.error("Error:", error)

      // Add error message
      const errorMessage: Message = {
        id: Date.now().toString(),
        content: "Sorry, there was an error processing your request.",
        isUser: false,
      }

      setMessages((prev) => [...prev, errorMessage])
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="flex flex-col items-center justify-center min-h-screen p-4 bg-gray-50">
      <div className="flex-grow overflow-y-auto w-full p-4 space-y-4">
        <div className="w-full items-center justify-center flex"><span className="p-y2 rounded-full px-3 text-xs  text-gray-400">All responses are generated by AI model and does not have any history record.</span></div>
        <div className="w-full items-center justify-center flex"><span className="p-y2 text-xs rounded-full px-3 bg-gray-100 text-gray-400">{new Date().toLocaleDateString()}</span></div>
        {messages.length === 0 ? (
          <div className="flex items-center justify-center h-full text-gray-400">Start a conversation...</div>
        ) : (
          messages.map((message) => (
            <div key={message.id} className={`flex ${message.isUser ? "justify-end" : "justify-start"}`}>
              <div
                className={`max-w-[80%] rounded-lg p-3 ${message.isUser ? "bg-primary text-primary-foreground" : "bg-muted"
                  }`}
              >
                {message.isUser ? (
                  <div className="relative z-10">
                    <div className="whitespace-pre-wrap bg-gray-100 shadow-sm rounded-lg p-2"  >{message.content}</div>
                    <p className="absolute bottom-4- right-0 text-xs text-gray-400">You</p>
                  </div>
                ) : (
                  <div className="z-10 relative">
                    <div className=" markdown-content shadow-sm bg-indigo-500 text-white rounded-lg p-2 prose prose-sm dark:prose-invert max-w-none">
                      <ReactMarkdown>{message.content}</ReactMarkdown>
                    </div>
                    <p className="absolute bottom-6- left-0 text-xs text-gray-400">नन्ही संजीवनी (AI)</p>
                  </div>

                )}
              </div>
            </div>
          ))
        )}
        <div ref={messagesEndRef} />
      </div>

      <div className=" p-4 bg-transparent z-20 w-full bottom-0 fixed flex items-center justify-center">
        <form onSubmit={handleSubmit} className="flex bg-white border items-center border-gray-100 w-full rounded-full p-2 lg:max-w-[700px] max-w-[300px] shadow-lg space-x-2">
          <input
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="Type your message..."
            disabled={isLoading}
            className="flex-grow border-gray-400 outline-none p-2 rounded-md"
          />
          <Button type="submit" className="bg-indigo-500 cursor-pointer rounded-full text-white " disabled={isLoading || !input.trim()}>

            {isLoading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Waiting...
              </>
            ) : (
              "Send"
            )}
          </Button>
        </form>
      </div>
    </div>
  )
}

